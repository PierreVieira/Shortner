package com.pierre.shortner.feature.links.input.data.repository

import com.pierre.shortner.core.room_provider.dao.LinkDao
import com.pierre.shortner.core.room_provider.entity.LinkEntity
import com.pierre.shortner.feature.links.input.data.dto.ShortenUrlDto
import com.pierre.shortner.feature.links.input.data.repository.datasource.LinkInputRemoteDataSource
import com.pierre.shortner.feature.links.input.domain.repository.LinkInputRepository
import kotlinx.datetime.Clock

class LinkInputRepositoryImpl(
    private val remoteDataSource: LinkInputRemoteDataSource,
    private val linkDao: LinkDao,
) : LinkInputRepository {
    override suspend fun postUrl(url: String): Result<Unit> = remoteDataSource
        .postUrl(url)
        .map { response: ShortenUrlDto ->
            linkDao.insert(response.toEntity())
        }

    override suspend fun getAllOriginalLinks(): List<String> =
        linkDao.getAll().map { it.originalLink }

    private fun ShortenUrlDto.toEntity(): LinkEntity = LinkEntity(
        id = 0, // will be generated by room
        originalLink = linksDto.original,
        shortedLink = linksDto.short,
        alias = alias,
        createdAt = Clock.System.now().toEpochMilliseconds()
    )
}
